using CaExch;
using CryptoExchange.Net.CommonObjects;
using DevExpress.Utils;
using DevExpress.XtraCharts;
using System.Reflection.Metadata.Ecma335;

namespace bot4;

public partial class UcSinexChart : UserControl
{
    ChartControl? _chart;

    int _zoom = 100;
    string _symbol = "";
    string _interval = "";
    bool _intervalIsChanged = false;
    AnExchange _exch = new CaBinance();
    List<Kline> _klines = new();

    Series _seriMain = new("main", ViewType.CandleStick);
    Series _seriVolu = new("Volume", ViewType.Bar);

    public UcSinexChart()
    {
        InitializeComponent();
    }

    private void UcSinexChart_Load(object sender, EventArgs e)
    {
        InitChart();
    }

    void AddLastClosePriceLabel()
    {
        double cp = (double)_klines.Last().ClosePrice!;
        if(_diagram == null) return;
        AxisY y = _diagram.AxisY;
        CustomAxisLabel l = new(cp.ToString("0.00"), cp);
        l.Tag = "LCP";
        var old = y.CustomLabels.FirstOrDefault(lbl => ((CustomAxisLabel)lbl).Tag.ToString() == "LCP");
        if (old != null)
            y.CustomLabels.Remove((CustomAxisLabel)old);
        y.CustomLabels.Add(l);
        y.LabelVisibilityMode = AxisLabelVisibilityMode.AutoGeneratedAndCustom;
        l.BackColor = Color.Red;
        l.TextColor = Color.White;
    }
 
    private void _chart_Zoom(object sender, ChartZoomEventArgs e)
    {
        if(_diagram == null) return;
        _diagram.Scroll(1000, 0);
    }

    public AnExchange Exchange { set { _exch = value; } get => _exch; }
    public string Symbol { set { _symbol = value; } get => _symbol; }
    public string Interval { 
        set {
            _intervalIsChanged = _interval != value;
            _interval = value; 
        } 
        get => _interval; 
    }
    public bool ShowPaneVolu
    {
        set
        {
            if(_diagram == null) return;
            _diagram.Panes["Volume"].Visibility =
                value ? ChartElementVisibility.Visible : ChartElementVisibility.Hidden;

            ShowAxisX();
        }
    }
    public bool ShowPaneIndi
    {
        set
        {
            if(_diagram == null) return;
            _diagram.Panes["Indica"].Visibility =
                value ? ChartElementVisibility.Visible : ChartElementVisibility.Hidden;

            ShowAxisX();
        }
    }

    public int Zoom
    {
        set
        {
            _zoom = value;
            //UpdateData();
        }
        get => _zoom;
    }

    void InitChart()
    {
        if (_chart != null) { 
            this.Controls.Remove(_chart);
            _chart.Dispose();
        }

        _chart = new();
        this.Controls.Add(_chart);
        _chart.Dock = DockStyle.Fill;

        _seriMain = new("main", ViewType.CandleStick);
        _seriVolu = new("Volume", ViewType.Bar);

        _chart.Series.Add(_seriVolu);
        _chart.Series.Add(_seriMain);

        _chart.Zoom += _chart_Zoom;

        SetLayout();
    }

    public async void UpdateData()
    {
        if (_intervalIsChanged)
        {
            // if interval is changed recreate chart
            InitChart();
            _intervalIsChanged = false;
        }

        if(_chart == null) return;

        _klines = await _exch.GetKlines(_symbol, _interval, _zoom);
        _chart.DataSource = _klines; //.Skip(_klines.Count - _zoom).ToList();

        _seriMain.DataSource = _klines;
        _seriMain.Name = _exch.Name + " - " + _symbol + " - " + _interval;

        _seriMain.SetFinancialDataMembers("OpenTime", "LowPrice", "HighPrice", "OpenPrice", "ClosePrice");
        _seriMain.ArgumentScaleType = ScaleType.DateTime;

        _seriVolu.ArgumentDataMember = "OpenTime";
        _seriVolu.ValueDataMembers.AddRange("Volume");
        _seriVolu.ArgumentScaleType = ScaleType.DateTime;

        _seriVolu.ShowInLegend = false;
    
        _seriMain.CrosshairLabelPattern = "O: {OV}\r\nH: {HV}\r\nL: {LV}\r\nC: {CV}";
        _seriVolu.CrosshairLabelPattern = "{V}";
        _seriVolu.CrosshairEnabled = DefaultBoolean.False;

        AddLastClosePriceLabel();

        decimal? maxVol = _klines.MaxBy(k => k.Volume)!.Volume;
        var volAxixY = _diagram!.SecondaryAxesY["Volume"];
        if(volAxixY == null) return;
            volAxixY.WholeRange.MaxValue = maxVol * 3;
        //_diagram.SecondaryAxesY["Volume"].VisualRange.MaxValue = maxVol;
    }

    void SetLayout()
    {
        PaneChart();
        ShowVolume();

        SetupAxisX();

        MainIndicators();
        PaneIndicators();

        ShowAxisX();
    }

    void ShowAxisX()
    {
        /*
         Ось Х и Скроллбар по оси X только в самой нижней панели
        */
        if(_diagram == null) return;

        _diagram.DefaultPane.LayoutOptions.RowSpan = 2;
        _diagram.AxisX.SetVisibilityInPane(true, _diagram.DefaultPane);
        _diagram.DefaultPane.ScrollBarOptions.XAxisScrollBarVisible = true;

        int vcp = 0, cp = _diagram.Panes.Count;
        foreach (XYDiagramPane p in _diagram.Panes)
        {
            _diagram.AxisX.SetVisibilityInPane(true, p);
            p.ScrollBarOptions.XAxisScrollBarVisible = true;

            if (p.Visibility == ChartElementVisibility.Visible)
                vcp++;
        }

        if (vcp > 0)
        {
            _diagram.AxisX.SetVisibilityInPane(false, _diagram.DefaultPane);
            _diagram.DefaultPane.ScrollBarOptions.XAxisScrollBarVisible = false;
        }

        for (int i = 0; i < vcp - 1; i++)
        {
            _diagram.Panes[i].ScrollBarOptions.XAxisScrollBarVisible = false;
            _diagram.AxisX.SetVisibilityInPane(false, _diagram.Panes[i]);
            _diagram.Panes[i].LayoutOptions.RowSpan = 1;
        }
    }
}
