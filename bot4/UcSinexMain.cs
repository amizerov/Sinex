using DevExpress.XtraCharts;

namespace bot4;

public partial class UcSinexChart
{
    CandleStickSeriesView? _view;
    XYDiagram? _diagram;

    void PaneChart()
    {
        _view = (CandleStickSeriesView)_seriMain.View;
        /////////////
        // Enable scrolling and zooming for the primary x-axis.
        if(_chart == null) return;
        _diagram = (XYDiagram)_chart.Diagram;
        _diagram.EnableAxisXZooming = true;
        _diagram.EnableAxisXScrolling = true;

        // Customize the series view settings.
        //_view.LineThickness = 2;
        //_view.LevelLineLength = 0.5;

        // Specify the series reduction options.
        _view.ReductionOptions.ColorMode = ReductionColorMode.OpenToCloseValue;
        _view.ReductionOptions.FillMode = CandleStickFillMode.AlwaysFilled;
        _view.ReductionOptions.Level = StockLevel.Close;
        _view.ReductionOptions.Visible = true;

        // Set point colors.
        _view.Color = Color.Green;
        _view.ReductionOptions.Color = Color.Red;

        var y = _diagram.AxisY;
        y.WholeRange.AlwaysShowZeroLevel = false;
        y.Alignment = AxisAlignment.Far;
        y.GridLines.Visible = false;
        y.GridLines.MinorVisible = false;
        y.Interlaced = true;

        // Configure the crosshair options.
        var co = _chart.CrosshairOptions;
        _chart.CrosshairOptions.ShowOnlyInFocusedPane = false;
        _chart.CrosshairOptions.ShowValueLine = true;
        //_chart.CrosshairOptions.ContentShowMode = CrosshairContentShowMode.Legend;
        _chart.CrosshairOptions.ShowArgumentLabels = true;
        _chart.CrosshairOptions.ShowValueLabels = true;
        _chart.CrosshairOptions.ShowOutOfRangePoints = true;
        co.CrosshairLabelBackColor = Color.Gray;

        // devex xtrachart
        // how to show series value lable on axisy?
        // https://www.devexpress.com/Support/Center/Question/Details/T1000



        // Specify the default legend's options.
        Legend l = _chart.Legend;
        _chart.Legend.AlignmentHorizontal = LegendAlignmentHorizontal.Left;
        _chart.Legend.AlignmentVertical = LegendAlignmentVertical.Top;
        //_chart.Legend.DockTarget = _diagram.DefaultPane;
        //l.MaxCrosshairContentWidth = 1;
        l.Direction = LegendDirection.LeftToRight;
        l.EquallySpacedItems = true;
        l.ItemVisibilityMode = LegendItemVisibilityMode.AutoGeneratedAndCustom;
    }

    void SetupAxisX()
    {
        if(_diagram == null) return;
        var x = _diagram.AxisX;
        //_diagram.AxisX.VisualRange.SetMinMaxValues(DateTime.Now.AddMinutes(-100), DateTime.Now);
        x.WholeRange.SideMarginsValue = 0;
        //x.SetVisibilityInPane(false, _diagram.DefaultPane);
        x.Label.ResolveOverlappingOptions.AllowStagger = true;
        x.Label.ResolveOverlappingOptions.AllowRotate = true;
        //x.DateTimeScaleOptions.MeasureUnit = DateTimeMeasureUnit.Minute;
        //x.DateTimeScaleOptions.GridAlignment = DateTimeGridAlignment.Minute;
        //x.DateTimeScaleOptions.GridSpacing = 5;

        //Make Candels width match to Interval
        x.DateTimeScaleOptions.ScaleMode = ScaleMode.Manual;
        int sec = _exch.IntervalInSeconds(_interval);
        x.DateTimeScaleOptions.MeasureUnit = DateTimeMeasureUnit.Second;
        x.DateTimeScaleOptions.MeasureUnitMultiplier = sec;
        //make candle width = current interval
        //x.DateTimeScaleOptions.GridSpacing = sec; it does not work
        //x.DateTimeScaleOptions.AggregateFunction = AggregateFunction.Financial;
        x.DateTimeScaleOptions.GridOffset = 0;

        //x.DateTimeScaleOptions.AggregateFunction = AggregateFunction.Financial;
        //x.DateTimeScaleOptions.GridOffset = 0;
        x.GridLines.Visible = true;
        //x.Interlaced = true;
        //x.Label.TextPattern = "{A:dd-MM HH:mm}";
    }
}
